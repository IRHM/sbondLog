<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSharp on sbondLog</title>
    <link>https://log.sbond.ml/categories/csharp/</link>
    <description>Recent content in CSharp on sbondLog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Jul 2019 01:09:49 +0100</lastBuildDate>
    
	<atom:link href="https://log.sbond.ml/categories/csharp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Make User Settings &amp; Edit Them C#</title>
      <link>https://log.sbond.ml/l/csharp/make-user-settings/</link>
      <pubDate>Thu, 18 Jul 2019 01:09:49 +0100</pubDate>
      
      <guid>https://log.sbond.ml/l/csharp/make-user-settings/</guid>
      <description>Step 1 - Create SettingsRight-click on your project and head down to Properties and then on the left-click on the settings button.
Enter the Name, type, scope &amp;amp; value of each setting you want to add.
Note: The Application Scope is not editable during runtime and will always stay the default value you set right now.</description>
    </item>
    
    <item>
      <title>How To Show Info On Hover With ToolTip C#</title>
      <link>https://log.sbond.ml/l/csharp/using-tooltip/</link>
      <pubDate>Sat, 29 Jun 2019 12:26:11 +0100</pubDate>
      
      <guid>https://log.sbond.ml/l/csharp/using-tooltip/</guid>
      <description>Step 1 - Add The ControlIn the toolbox search for &amp;ldquo;ToolTip&amp;rdquo; and plop it onto your form. It isn&amp;rsquo;t something you put directly on your form, but instead it will just sit at the bottom in a little box.
You can click on it and edit it&amp;rsquo;s properties.
Step 2 - Add InfoClick on the control you want to display info about, and find &amp;ldquo;ToolTip on &amp;lt; ToolTip Name &amp;gt;&amp;ldquo;.</description>
    </item>
    
    <item>
      <title>Rounding The Edges Of Your Form C#</title>
      <link>https://log.sbond.ml/l/csharp/rounded-form/</link>
      <pubDate>Sat, 29 Jun 2019 10:44:11 +0100</pubDate>
      
      <guid>https://log.sbond.ml/l/csharp/rounded-form/</guid>
      <description>Step 1 - The Importingusing System.Runtime.InteropServices; using System.Drawing;  Put this one inside of your class: [DllImport(&amp;#34;Gdi32.dll&amp;#34;, EntryPoint = &amp;#34;CreateRoundRectRgn&amp;#34;)] private static extern IntPtr CreateRoundRectRgn ( int nLeftRect, // x-coordinate of upper-left corner  int nTopRect, // y-coordinate of upper-left corner  int nRightRect, // x-coordinate of lower-right corner  int nBottomRect, // y-coordinate of lower-right corner  int nWidthEllipse, // height of ellipse  int nHeightEllipse // width of ellipse );</description>
    </item>
    
    <item>
      <title>Making A Draggable, Borderless Form C#</title>
      <link>https://log.sbond.ml/l/csharp/draggable-borderless-form/</link>
      <pubDate>Thu, 27 Jun 2019 02:17:12 +0100</pubDate>
      
      <guid>https://log.sbond.ml/l/csharp/draggable-borderless-form/</guid>
      <description>Step 1 - Adding EventGo into the events of either the whole form or on a control/panel and add the MouseDown event. 
Step 2 - Variables &amp;amp; Importing NamespaceImport the namespace: using System.Runtime.InteropServices; 
Define the following: public const int WM_NCLBUTTONDOWN = 0xA1; public const int HT_CAPTION = 0x2; [DllImportAttribute(&amp;#34;user32.</description>
    </item>
    
    <item>
      <title>Using Windows Characters on Custom Border C#</title>
      <link>https://log.sbond.ml/l/csharp/using-windows-characters-on-custom-border/</link>
      <pubDate>Thu, 27 Jun 2019 00:58:27 +0100</pubDate>
      
      <guid>https://log.sbond.ml/l/csharp/using-windows-characters-on-custom-border/</guid>
      <description>Step 1- Find CharactersFind and open Character Map in windows. In windows 10 you can just search &amp;lsquo;character&amp;rsquo; in the start menu and you should find it.
Change the font to &amp;lsquo;Marlett&amp;rsquo; and you should see all the charcters that are commonly used in applications.

From here you can just double click on the characters you want to use and then click the Copy button next to the textbox.</description>
    </item>
    
    <item>
      <title>Populating Combo Boxes in C#</title>
      <link>https://log.sbond.ml/l/csharp/populating-comboboxes/</link>
      <pubDate>Fri, 21 Jun 2019 02:10:34 +0100</pubDate>
      
      <guid>https://log.sbond.ml/l/csharp/populating-comboboxes/</guid>
      <description>Step 1 - Creating ItOf course the first step if to Create your combo box and assign it an appropriate Name.
Step 2 - Adding ItemsI put all of the things I wanted into a string array for easy accessibility and readability. My code is set out like this:</description>
    </item>
    
    <item>
      <title>Make a Stopwatch C#</title>
      <link>https://log.sbond.ml/l/csharp/make-a-stopwatch/</link>
      <pubDate>Sat, 08 Jun 2019 10:02:18 +0100</pubDate>
      
      <guid>https://log.sbond.ml/l/csharp/make-a-stopwatch/</guid>
      <description>Step 1Import System.Diagnostics: using System.Diagnostics; 
Step 2Initialise the timer &amp;amp; start it: Stopwatch timer = new Stopwatch(); timer.Start(); 
Step 3Stop the timer: timer.Stop(); 
Step 4Display stopwatch results: Console.WriteLine(overallTimer.Elapsed.Seconds.ToString() + &amp;#34;s&amp;#34;);</description>
    </item>
    
    <item>
      <title>Write to Text File in C#</title>
      <link>https://log.sbond.ml/l/csharp/write-to-text-file/</link>
      <pubDate>Sat, 08 Jun 2019 09:34:38 +0100</pubDate>
      
      <guid>https://log.sbond.ml/l/csharp/write-to-text-file/</guid>
      <description>HowThere are two methods for this. The first method will keep adding on the new data to the bottom of the text file, whilst the second method will overwrite all previous things in the text file whenever new data is written.
Method 1 (Don&amp;#39;t overwrite Any Data)TextWriter saveData = new StreamWriter(@&amp;#34;C:\Path\To\TextFile.</description>
    </item>
    
  </channel>
</rss>